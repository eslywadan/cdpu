# OpenAPI Specfification (OAS) is a standard, language-agnostic interface description for RESTful APIs,
# Which allows both humans and computers ti discover and understand the capabilties of a service
# without access to soruce code, documentation, or through network traffic inspection.
# Version 3.0.3 is a stable and widlly accpeted version
openapi: 3.0.3

# The 'info' object provides metadata about the API.
info:
  title: "Some API Service"
  description: :"This is a sample API service description using the OpenAPI 3.0 specification. It provides a template for documenting your own API. "
  termsOfService: "http://exmaple.com/terms/"  # The ul points to the Terms of Service document for the API
  contact: 
    name: "API Support Team"
    url: "http://exmaple.com/support"
    email: "support@example.com"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/license/LICENSE-2.0.html"
  version: "1.0.0"

# The 'servers' object provides connectivity information to a target server
# you can list multiple servcers, for example, for production, staging, and development environments
servers:
  - url: "https://api.example.com/v1"
    description: "Production Server"
  - url: "https://stagingapi.example.com/v1"
    description: "Staging Server"

# The 'tags' object provides a way to group related operations.
# These tags are used by tools like Swagger UI to organize the displayed API.
tags:
  - name: "Users"
    description: "Operations related to user management"
  - name: "Products"
    description: "Operations related to product inventory"

# The 'paths' object holds the relative paths to the individual endpoints and their operations.
# This is the core of your API definition.
paths:
  /users:
    get:
      tags:
        - "Users"
      summary: "List all users"
      description: "Returns a list of all users in the system."
      operationId: "listUsers"
      parameters:
        - name: "limit"
          in: "query"
          description: "How many items to return at one time (max 100)"
          required: false
          schema:
            type: "integer"
            format: "int32"
      responses:
        '200':
          description: "A successful response with a list of users."
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        '400':
          description: "Invalid input"
          $ref: "#/components/responses/ErrorResponse"

    post:
      tags:
        - "Users"
      summary: "Create a new user"
      description: "Adds a new user to the system."
      operationId: "createUser"
      requestBody:
        description: "User object that needs to be added to the store"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        '201':
          description: "User created successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Invalid input"
          $ref: "#/components/responses/ErrorResponse"

  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "Find user by ID"
      description: "Returns a single user based on their ID."
      operationId: "getUserById"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of the user to return"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "User not found"
          $ref: "#/components/responses/ErrorResponse"

# The 'components' object holds a set of reusable objects for different parts of the OAS.
# This helps to keep your specification DRY (Don't Repeat Yourself).
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "Unique identifier for the user."
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        username:
          type: "string"
          description: "User's chosen username."
          example: "johndoe"
        email:
          type: "string"
          format: "email"
          description: "User's email address."
          example: "johndoe@example.com"
        createdAt:
          type: "string"
          format: "date-time"
          description: "Timestamp of when the user was created."
          example: "2023-08-04T10:30:00Z"

    UserInput:
      type: "object"
      required:
        - username
        - email
        - password
      properties:
        username:
          type: "string"
          description: "User's chosen username."
          example: "johndoe"
        email:
          type: "string"
          format: "email"
          description: "User's email address."
          example: "johndoe@example.com"
        password:
          type: "string"
          format: "password"
          description: "User's password."
          example: "strongPassword123"

    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"

  responses:
    ErrorResponse:
      description: "An error response."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"

# The 'security' object defines which security schemes are applied to the API.
security:
  - ApiKeyAuth: []